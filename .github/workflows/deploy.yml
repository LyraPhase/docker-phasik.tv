name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v45
      with:
        files: |
          .do/app.yaml

    - id: setup_buildx
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        builder: ${{ steps.setup_buildx.outputs.name }}
        cache-from: type=gha
        cache-to: type=gha, mode=max
        tags: lyraphase/phasik.tv:latest,lyraphase/phasik.tv:${{ github.sha }}
    #     tags: registry.digitalocean.com/<registry-name>/<repository_name>:${{ github.sha }}

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Set app ID variable
      id: app_id
      run: echo "APP_ID=$(doctl apps list --no-header --format 'ID,Spec.Name' | grep 'docker-phasik-tv' | awk '{print $1}')" >> $GITHUB_ENV

    - name: Update App Spec if Changed
      run: doctl apps update '${{ env.APP_ID }}' --spec '${{github.workspace}}/.do/app.yaml'
      if: steps.changed-files.outputs.any_changed == 'true'

    - name: Deploy to DigitalOcean App
      run: doctl apps create-deployment '${{ env.APP_ID }}' --force-rebuild --wait

    # - name: Deploy to DigitalOcean App (no spec update)
    #   run: doctl apps create-deployment '${{ env.APP_ID }}' --wait
    # TODO: Use DigitalOcean K8s for scaling?
    # - name: Log in to DigitalOcean Container Registry
    #   run: doctl registry login

    # - name: Update deployment file
    #   run: |
    #     TAG=${{ github.sha }}
    #     sed -i 's|<IMAGE>|registry.digitalocean.com/<registry-name>/<repository_name>:'${TAG}'|' k8s/deployment.yml

    # - name: Save DigitalOcean kubeconfig
    #   run: doctl kubernetes cluster kubeconfig save <cluster-name>

    # - name: Deploy to DigitalOcean Kubernetes
    #   run: kubectl apply -f k8s/deployment.yml

    # - name: Verify deployment
    #   run: kubectl rollout status deployment/<deployment_name>
